<?xml version="1.0"?>
<!--  
 Copyright (c) 2003, Caltha - Gajda, Krzewski, Mach, Potempski Sp.J. 
 All rights reserved. 
 
 Redistribution and use in source and binary forms, with or without modification,  
 are permitted provided that the following conditions are met: 
 
 * Redistributions of source code must retain the above copyright notice,  
   this list of conditions and the following disclaimer. 
 * Redistributions in binary form must reproduce the above copyright notice,  
   this list of conditions and the following disclaimer in the documentation  
   and/or other materials provided with the distribution. 
 * Neither the name of the Caltha - Gajda, Krzewski, Mach, Potempski Sp.J.  
   nor the names of its contributors may be used to endorse or promote products  
   derived from this software without specific prior written permission. 
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  
 INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,  
 BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  
 WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  
 POSSIBILITY OF SUCH DAMAGE. 
--> 
 
<!--
 | Ledge Maven plugin 
 |
 | @author <a href="mailto:rafal@caltha.pl">Rafal Krzewski</a>
 | @version $Id$
 -->
<project xmlns:j="jelly:core"
         xmlns:define="jelly:define"
         xmlns:velocity="jelly:velocity"
         xmlns:ant="jelly:ant"
         xmlns:util="jelly:util"
         xmlns:ledge="ledge">

  <define:taglib uri="ledge">
    <!--
     | Create index file used by ReadOnlyFileSystemProvider
     | 
     | @param @dir directory to index
     | @param @index the file to write index to. ${dir}/META-INF/files.lst if not set.
     -->
    <define:tag name="indexFiles">
      <ant:echo>Creating file index...</ant:echo>
      <j:if test="${dir == null}">
        <ant:fail>required attribute directory is not set</ant:fail>
      </j:if>
      <j:if test="${index == null}">
        <j:set var="index" value="${dir}/META-INF/files.lst"/>
      </j:if>
      <j:new var="indexFile" className="java.io.File">
        <j:arg type="java.lang.String" value="${index}"/>
      </j:new>
      <j:invoke method="mkdirs" on="${indexFile.getParentFile()}"/>
      <ant:fileScanner var="files">
        <ant:fileset dir="${dir}" excludes="**/.*"/>
      </ant:fileScanner>
      <j:new var="dirFile" className="java.io.File">
        <j:arg type="java.lang.String" value="${dir}"/>
      </j:new>
      <j:set var="skip" value="${dirFile.canonicalPath.length()}"/>
      <velocity:merge name="${index}"
                      basedir="${plugin.dir}/plugin-resources/templates"
                      template="files.lst.vt"
                      outputEncoding="UTF-8"/>        
    </define:tag>
    
    <define:tag name="warVersionPage">
      <ant:echo>Creating version page ${path}</ant:echo>
      <j:new var="date" className="java.util.Date"/>
      <j:new var="dateFormat" className="java.text.SimpleDateFormat">
        <j:arg type="java.lang.String" value="yyyy-MM-dd HH:mm"/>
      </j:new>
      <j:set var="userName" value="${context.getVariable('maven.username')}"/>
      <util:file var="pathFile" name="${path}"/>
      ${pathFile.parentFile.mkdirs()}
      <velocity:merge name="${path}"
                      basedir="${plugin.dir}/plugin-resources/templates"
                      template="version.html.vt"/>
    </define:tag>
    
    <!--
     | @param srcDir java.io.File
     | @param srcMask java.lang.String
     | @param dstDir java.io.File
     -->
    <define:tag name="smartCopy">
      <j:set var="srcDir" value="${srcDir.canonicalFile}"/>
      <j:set var="dstDir" value="${dstDir.canonicalFile}"/>
      <fileScanner var="srcFiles">
        <fileset dir="${srcDir.path}">
          <include name="${srcMask}"/>
        </fileset>
      </fileScanner>
      <j:forEach var="srcFile" items="${srcFiles.iterator()}">
        <j:set var="relPath" value="${srcFile.path.substring(srcDir.path.length())}"/>
        <util:file var="dstFile" name="${dstDir}/${relPath}"/>
        <j:choose>
          <j:when test="${dstFile.exists()}">
            <util:loadText var="srcContent" file="${srcFile}"/>
            <util:loadText var="dstContent" file="${dstFile}"/>
            <j:choose>
              <j:when test="${!srcContent.equals(dstContent)}">
                <echo>updating ${dstFile.path} (modified)</echo>
                <copy file="${srcFile.path}" tofile="${dstFile.path}"/>
              </j:when>
              <j:otherwise>
                <!--
                <echo>not updating ${dstFile.path} (not modified)</echo>
                -->
              </j:otherwise>
            </j:choose>
          </j:when>
          <j:otherwise>
            <echo>introducing ${dstFile.path} (new file)</echo>
            <copy file="${srcFile.path}" tofile="${dstFile.path}"/>
          </j:otherwise>
        </j:choose>
      </j:forEach>
    </define:tag>
    
  </define:taglib>

  <goal name="ledge:index-jar"
        description="Generates a jar index in maven.build.dest/META-INF/files.lst">
    <ledge:indexFiles dir="${maven.build.dest}"/>
  </goal>
  
  <goal name="ledge:index-war"
        description="Generates a war index in maven.war.webapp.dir/WEB-INF/files.lst">
    <j:set var="webappDir" value="${pom.getPluginContext('maven-war-plugin').getVariable('maven.war.webapp.dir')}"/>
    <ledge:indexFiles dir="${webappDir}" index="${webappDir}/WEB-INF/files.lst"/>
  </goal> 
  
  <goal name="ledge:version-war" prereqs="war:init"
       description="Genereates version page in the web application home directory">
    <j:set var="webappDir" value="${pom.getPluginContext('maven-war-plugin').getVariable('maven.war.webapp.dir')}"/>
    <ledge:warVersionPage path="${webappDir}/content/version.html"/>
  </goal>
  
  <goal name="ledge:javacc">
    <util:file var="srcDir" name="${pom.build.sourceDirectory}"/>
    <j:set var="srcDir" value="${srcDir.canonicalFile}"/>
    <!-- jjtree grammars -->
    <fileScanner var="srcFiles">
      <fileset dir="${srcDir.path}">
        <include name="**/*.jjt"/>
      </fileset>
    </fileScanner>
    <j:forEach var="srcFile" items="${srcFiles.iterator()}">
      <j:set var="relPath" value="${srcFile.parentFile.path.substring(srcDir.path.length())}"/>
      <util:file var="dstDir" name="${maven.build.dir}/javacc/${relPath}"/>
      <j:set var="dstDir" value="${dstDir.canonicalFile}"/>
      <copy todir="${dstDir.path}" overwrite="true">
        <fileset dir="${srcFile.parentFile.path}">
          <include name="*.java"/>
        </fileset>
      </copy>
      <echo>Generating grammar for ${relPath}</echo>
      <j:set var="dummy" value="${dstDir.mkdirs()}"/>
      <jjtree target="${srcFile.path}" outputdirectory="${dstDir.path}" javacchome="${build.javacc.home}"/>
      <ledge:smartCopy srcDir="${dstDir}" srcMask="*.jj" dstDir="${srcFile.parentFile}"/>
      <ledge:smartCopy srcDir="${dstDir}" srcMask="*.java" dstDir="${srcFile.parentFile}"/>
    </j:forEach>

    <!-- javacc parsers -->
    <fileScanner var="srcFiles">
      <fileset dir="${srcDir.path}">
        <include name="**/*.jj"/>
      </fileset>
    </fileScanner>
    <j:forEach var="srcFile" items="${srcFiles.iterator()}">
      <j:set var="relPath" value="${srcFile.parentFile.path.substring(srcDir.path.length())}"/>
      <util:file var="dstDir" name="${maven.build.dir}/javacc/${relPath}"/>
      <echo>Generating parser for ${relPath}</echo>
      <j:set var="dummy" value="${dstDir.mkdirs()}"/>
      ${dstDir.mkdirs()}
      <javacc target="${srcFile.path}" outputdirectory="${dstDir.path}" javacchome="${build.javacc.home}"/>
      <ledge:smartCopy srcDir="${dstDir}" srcMask="*.java" dstDir="${srcFile.parentFile}"/>
    </j:forEach>
  </goal>

</project>
