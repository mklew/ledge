<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>ObjectLedge : container </title>
  </properties>
  
  <body>
    <section>
    <subsection name="Introduction">
      <p>
        A container a provides the environment in which components may operate. It instantiates the 
        components, connects them together (this is called compositioning), manages their lifecycle
        (notifies them about system startup and shutdown), provides them with logging facilities
        and configuration. The container may also provide run-time administrative functionality, 
        from log verbosity adjustments, through component reconfiguration and JMX-enabled components
        management to aspect weaving/unweawing and component implementation hot swapping.
      </p>
      <p>
        ObjectLedge container builds on the excelent <a href="http://picocontainer.org">
        PicoContainer</a> and <a href="http://nanocontainer.org">NanoContainer.org</a> packages.
		Thanks to their flexible design, we were able to create a number of 
		<a href="pico-extensions.html">extensions</a> necessary to implement configuration and
		logging facilities of our container that can be seamlessly plugged into Pico/Nano.
      </p>
    </subsection>
    <subsection name="Compositioning">
      <p>
        The composition of components is described using an XML file. We are using a custom
        implementation of the <code>org.picoextras.script.xml.XmlFrontEnd</code> that is 
        a bit more expressive than the one found in NanoContainer (but we'd love to see our changes
        folded back to Nano!) See the <a href="pico-extensions.html">extensions</a> page for 
        more details.
      </p>
    </subsection>
    <subsection name="Configuration">
      <p>
        The components are configured using separate XML files. This makes locating the settings
        of a particular component easier than with a single XML or properties file. It is also
        more friendly to revision control systems, splitting the configuration into semantically
        distinct items. All of the configuration files are subject to schema checking in order to 
        detect configuration problems early, and without the need to write boiler plate java code.
        We have chosen <a href="http://relaxng.org">RelaxNG</a> schema language, because it is 
        compact and easy to read. We use simple naming scheme to associate the component with it's
        configuration file and the configuration schema. If a component class name is 
        <code>com.wombat.Printer</code> the configuration file name is 
        <code>com.wombat.Printer.xml</code> and the schema file path in the classpath is
        <code>com/wombat/Printer.rng</code>. To be more specific, the containter derives the
        names from the <i>role</i> of the component in the system. In simple cases it is equivalent
        to the component's class name, but usually it is the name of an interface the component
        imlements, that the other components depend on.
      </p>
      <p>
        The configuration of a component, read from the XML file is passed to the component as an
        instance of <code>org.jcontainer.dna.Configuration</code> interface. All you need to do
        is to declare a parameter of that type in your component's constructor.
      </p>
    </subsection>
    <subsection name="Logging">
      <p>
        A similar facility is provided for logging. If your component declares an
        <code>org.jcontainer.dna.Logger</code> parameter in the constructor, it will be passed
        a logger instance. All the loggers are configured by a single component, the 
        <code><a href="apidocs/org/objectledge/logging/LoggingConfigurator.html">LoggingConfigurator</a></code>, 
        that will also provide runtime verbosity adjustment facilities in the future.
      </p>
    </subsection>
    <subsection name="Lifecycle">
      <p>
        We are using standard facilitis of the PicoContainer for the management. A component
        that implements <code>org.picocontainer.lifecycle.Lifecycle</code> will be notified about
        the container's startup, shutdown, and disposal.
      </p>
    </subsection>
    </section>
  </body>
</document>
  