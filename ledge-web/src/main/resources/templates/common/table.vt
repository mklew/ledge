##  
## Copyright (c) 2003, 2004, Caltha - Gajda, Krzewski, Mach, Potempski Sp.J.  
## All rights reserved.  
##  
## Redistribution and use in source and binary forms, with or without modification,   
## are permitted provided that the following conditions are met:  
##  
## * Redistributions of source code must retain the above copyright notice,   
##   this list of conditions and the following disclaimer.  
## * Redistributions in binary form must reproduce the above copyright notice,   
##   this list of conditions and the following disclaimer in the documentation   
##   and/or other materials provided with the distribution.  
## * Neither the name of the Caltha - Gajda, Krzewski, Mach, Potempski Sp.J.   
##   nor the names of its contributors may be used to endorse or promote products   
##   derived from this software without specific prior written permission.  
##  
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"   
## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED   
## WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
## IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,   
## INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,   
## BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,  
## OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,   
## WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)   
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   
## POSSIBILITY OF SUCH DAMAGE.  
## 
#**
 * Table toolkit rendering macros.
 *
 * @author <a href="mailto:dgajda@caltha.pl">Damian Gajda</a>
 * @author <a href="mailto:pablo@caltha.pl">Paweï¿½ Potempski</a>
 * @version $Id: table.vt,v 1.13 2006-04-03 18:58:43 zwierzem Exp $
*###

## ------------------------------------------------------------------------------------------------
## ----------------------------------- SORTING LINK GENERATION ------------------------------------
## ------------------------------------------------------------------------------------------------

#**
 * Displays a single header cell contents.
 *
 * @param $table the table tool.
 * @param $column TableColumn object.
 * @param $tableLink LinkTool with preset tableId parameter.
 *#
#macro(tableView_headCellContent $table $column $tableLink)
  #if($column.isSortable())
    <a href="$tableLink.action('table.SetSortColumn').set('sortColumn',$column.name)">$column.label</a>
    #if($table.getSortColumn() && $table.getSortColumn() == $column)
      #if($table.getAscSort())
      <img src="$link.content('images/tree/down.gif')" border="0" />
      #else
      <img src="$link.content('images/tree/up.gif')" border="0" />
      #end
    #end
  #else
    $column.label
  #end
#end

#**
 * Displays table headers.
 *
 * @param $table the table tool.
 * @param $tableLink LinkTool with preset tableId.
 * @param $columnOrder list of column names.
 *#
#macro(tableView_header $table $tableLink $columnOrder)
  #foreach($columnName in $columnOrder)
    #set($column = $table.getColumn($columnName))
    <th ##
#if($column.width)width="$column.width" #end##
#if($column.style)style="$column.style" #end##
#if($column.align)align="$column.align" #end##
#if($column.valign)valign="$column.valign" #end##
#if($column.get('class'))class="$column.get('class')"#end nowrap="nowrap">
    #tableView_headCellContent($table $column $tableLink)
    </th>
  #end
#end

#**
 * Displays a single header cell contents - form submit version.
 *
 * @param $table the table tool.
 * @param $column TableColumn object.
 * @param $tableLink LinkTool with preset tableId parameter.
 * @param $function the javascript function to be called.
 *#
#macro(tableView_headCellContent_Submit $table $column $tableLink $function)
  #if($column.isSortable())
    #set($sortLink = $tableLink.action('table.SetSortColumn').set('sortColumn',$column.name))
    #set($sortLink = "javascript:${function}('$sortLink')")
    <a href="$sortLink">$column.label</a>
    #if($table.getSortColumn() && $table.getSortColumn() == $column)
      #if($table.getAscSort())
      <img src="$link.content('images/tree/down.gif')" border="0" />
      #else
      <img src="$link.content('images/tree/up.gif')" border="0" />
      #end
    #end
  #else
    $column.label
  #end
#end

#**
 * Displays table headers - form submit version.
 *
 * @param $table the table tool.
 * @param $tableLink LinkTool with preset tableId.
 * @param $columnOrder list of column names.
 * @param $function the javascript function to be called.
 *#
#macro(tableView_header_Submit $table $tableLink $columnOrder $function)
  #foreach($columnName in $columnOrder)
    #set($column = $table.getColumn($columnName))
    <th ##
#if($column.width)width="$column.width" #end##
#if($column.style)style="$column.style" #end##
#if($column.align)align="$column.align" #end##
#if($column.valign)valign="$column.valign" #end##
#if($column.get('class'))class="$column.get('class')"#end nowrap="nowrap">
    #tableView_headCellContent_Submit($table $column $tableLink $function)
    </th>
  #end
#end

#**
 * Sets table column labels from i18n.
 * 
 * @param $table the table tool.
 * @param $i18n aproprietly scoped I18n tool.
 *#
#macro(tableView_i18nLabels $table $i18n $columnOrder)
#foreach($column in $columnOrder)
$table.getColumn($column).set('label', $i18n.usePrefix('labels').get($column))
#end	
#end

## ------------------------------------------------------------------------------------------------
## ----------------------------------- CONVENIENCE ------------------------------------------------
## ------------------------------------------------------------------------------------------------

#**
 * Displays table body.
 *
 * @param $table the table tool.
 *#
#macro(tableView_rows $table)
  #if ($table.pageRowCount == 0)
    #tableView_emptyRow()
  #else
    #foreach ($row in $table.rows)
      ## compute even/odd table row
      #set ($odd = $velocityCount%2)
      <tr class="row$odd">
      #tableView_row($table $row $odd)
      </tr>
    #end
  #end
#end

## ------------------------------------------------------------------------------------------------
## ----------------------------------- PAGER GENERATION -------------------------------------------
## ------------------------------------------------------------------------------------------------

#**
 * Displays the table pager.
 *
 * @param $table the table tool.
 * @param $tableLink LinkTool with preset tableId.
 *#
#macro(tableView_pager $table $tableLink)
#if($table.numPages > 1)
<span class="table-pager">
#set($setPageLink = $tableLink.action('table.SetPage'))
<a href="$setPageLink.set('page',$table.getPageNumber(0))">$i18n.get('table.page.first')</a> |
<a href="$setPageLink.set('page',$table.getRelativePageNumber(-1))">$i18n.get('table.page.previous')</a> |
$table.currentPage $i18n.get('table.page.of') $table.numPages |
&nbsp;
<a href="$setPageLink.set('page',$table.getRelativePageNumber(1))">$i18n.get('table.page.next')</a> |
<a href="$setPageLink.set('page',$table.getPageNumber($table.numPages))">$i18n.get('table.page.last')</a>
</span>
#end
#end

#**
 * Displays the table pager - form submit version.
 *
 * @param $table the table tool.
 * @param $tableLink LinkTool with preset tableId.
 * @param $function the javascript function to be called.  
 *#
#macro(tableView_pager_Submit $table $tableLink $function)
#if($table.numPages > 1)
<span class="table-pager">
#set($pageLink = $tableLink.action('table.SetPage').set('page',$table.getPageNumber(0)))
#set($pageLink = "javascript:${function}('$pageLink')")
<a href="$pageLink">$i18n.get('table.page.first')</a> |

#set($pageLink = $tableLink.action('table.SetPage').set('page',$table.getRelativePageNumber(-1)))
#set($pageLink = "javascript:${function}('$pageLink')")
<a href="$pageLink">$i18n.get('table.page.previous')</a> |
$table.currentPage $i18n.get('table.page.of') $table.numPages |
&nbsp;
#set($pageLink = $tableLink.action('table.SetPage').set('page',$table.getRelativePageNumber(1)))
#set($pageLink = "javascript:${function}('$pageLink')")
<a href="$pageLink">$i18n.get('table.page.next')</a> |
#set($pageLink = $tableLink.action('table.SetPage').set('page',$table.getPageNumber($table.numPages)))
#set($pageLink = "javascript:${function}('$pageLink')")
<a href="$pageLink">$i18n.get('table.page.last')</a>
</span>
#end
#end


#**
 * Displays a relative pager
 *
 * @param $table the table tool.
 * @param $tableLink LinkTool with preset tableId.
 *#
#macro(tableView_relativePager $table $tableLink)
#if($table.numPages > 1)
<span class="table-pager">
#set($setPageLink = $tableLink.action('table.SetPage'))
<a href="$setPageLink.set('page',$table.getPageNumber(0))">$i18n.get('table.page.first')</a> |
#if($table.getRelativePageNumber(-5) > 1)... #end
#foreach($pageNum in [$table.getRelativePageNumber(-5)..$table.getRelativePageNumber(-1)])
  #if($pageNum != $table.currentPage) <a href="$setPageLink.set('page',$pageNum)">$pageNum</a> #end
#end
<b>$table.currentPage</b>
#foreach($pageNum in [$table.getRelativePageNumber(1)..$table.getRelativePageNumber(5)])
  #if($pageNum != $table.currentPage) <a href="$setPageLink.set('page',$pageNum)">$pageNum</a> #end
#end
#if($table.getRelativePageNumber(5) < $table.numPages)... #end
| <a href="$setPageLink.set('page',$table.getPageNumber($table.numPages))">$i18n.get('table.page.last')</a>
</span>
#end
#end

#**
 * Displays a relative pager - form submit version.
 *
 * @param $table the table tool.
 * @param $tableLink LinkTool with preset tableId.
 * @param $function the javascript function to be called.  
 *#
#macro(tableView_relativePager_Submit $table $tableLink $function)
#if($table.numPages > 1)
<span class="table-pager">
#set($pageLink = $tableLink.action('table.SetPage').set('page',$table.getPageNumber(0)))
#set($pageLink = "javascript:${function}('$pageLink')")
<a href="$pageLink">$i18n.get('table.page.first')</a> |

#if($table.getRelativePageNumber(-5) > 1)... #end
#foreach($pageNum in [$table.getRelativePageNumber(-5)..$table.getRelativePageNumber(-1)])
  #if($pageNum != $table.currentPage)
  #set($pageLink = $tableLink.action('table.SetPage').set('page',$pageNum))
  #set($pageLink = "javascript:${function}('$pageLink')")
  <a href="$pageLink">$pageNum</a> #end
#end
<b>$table.currentPage</b>
#foreach($pageNum in [$table.getRelativePageNumber(1)..$table.getRelativePageNumber(5)])
  #if($pageNum != $table.currentPage)
  #set($pageLink = $tableLink.action('table.SetPage').set('page',$pageNum))
  #set($pageLink = "javascript:${function}('$pageLink')")
  <a href="$pageLink">$pageNum</a> 
  #end
#end
#if($table.getRelativePageNumber(5) < $table.numPages)... #end
  #set($pageLink = $tableLink.action('table.SetPage').set('page',$table.getPageNumber($table.numPages)))
  #set($pageLink = "javascript:${function}('$pageLink')")
| <a href="$pageLink">$i18n.get('table.page.last')</a>
</span>
#end
#end

#macro(table_pageRowNums $table $pageNum)
#set($endNum = $pageNum*$table.pageSize)
#set($startNum = $endNum - $table.pageSize + 1)
#if($endNum > $table.totalRowCount)
#set($endNum = $table.totalRowCount)
#end
[$startNum - $endNum]##
#end
#**
 * Displays a relative pager showing row numbers
 *
 * @param $table the table tool.
 * @param $tableLink LinkTool with preset tableId.
 *#
#macro(tableView_relativePagerRows $table $tableLink $relativeNum)
#set($minusRelativeNum = $relativeNum * (-1))
#if($table.numPages > 1)
<span class="table-pager">
#set($setPageLink = $tableLink.action('table.SetPage'))
<a href="$setPageLink.set('page',$table.getPageNumber(0))">$i18n.get('table.page.first')</a> |
#if($table.getRelativePageNumber($minusRelativeNum) > 1)... #end
#foreach($pageNum in [$table.getRelativePageNumber($minusRelativeNum)..$table.getRelativePageNumber(-1)])
  #if($pageNum != $table.currentPage) <a href="$setPageLink.set('page',$pageNum)">#table_pageRowNums($table $pageNum)</a> #end
#end
<b>#table_pageRowNums($table $table.currentPage)</b>
#foreach($pageNum in [$table.getRelativePageNumber(1)..$table.getRelativePageNumber($relativeNum)])
  #if($pageNum != $table.currentPage) <a href="$setPageLink.set('page',$pageNum)">#table_pageRowNums($table $pageNum)</a> #end
#end
#if($table.getRelativePageNumber($relativeNum) < $table.numPages)... #end
| <a href="$setPageLink.set('page',$table.getPageNumber($table.numPages))">$i18n.get('table.page.last')</a>
</span>
#end
#end

#**
 * Displays a page size chooser
 *
 * @param $table the table tool.
 * @param $tableLink LinkTool with preset tableId.
 * @param $sizes a list of page sizes (ie. [10,20,50])
 *#
#macro(tableView_pageSizeChooser $table $tableLink $sizes )
<span class="table-pagesize-chooser">
#foreach($size in $sizes)
<input type="radio" name="table${table.id}-pageSize" id="table${table.id}-size$size" onchange="document.location.href='$tableLink.action('table.SetPageSize').set("table${table.id}-pageSize",$size)'" #if($table.pageSize == $size)checked#end> <label for="table${table.id}-size$size">$size</label>
#end
<input type="radio" name="table${table.id}-pageSize" id="table${table.id}-size0" onchange="document.location.href='$tableLink.action('table.SetPageSize').set("table${table.id}-pageSize",0)'" #if($table.pageSize == 0)checked#end> <label for="table${table.id}-size0">$i18n.get('table.page.all')</label>
$i18n.get('table.page.size')
</span>
#end

#**
 * Displays a page size chooser - form submit version
 *
 * @param $table the table tool.
 * @param $tableLink LinkTool with preset tableId.
 * @param $sizes a list of page sizes (ie. [10,20,50])
 * @param $function the javascript function to be called. 
 *#
#macro(tableView_pageSizeChooser_Submit $table $tableLink $sizes $function)
<span class="table-pagesize-chooser">
#foreach($size in $sizes)
  #set($pageLink = $tableLink.action('table.SetPageSize').set("table${table.id}-pageSize",$size))
  #set($pageLink = "javascript:${function}('$pageLink')")
  <input type="radio" name="table${table.id}-pageSize" id="table${table.id}-size$size" onchange="$pageLink" #if($table.pageSize == $size)checked#end> <label for="table${table.id}-size$size">$size</label>
#end
#set($pageLink = $tableLink.action('table.SetPageSize').set('pageSize',0))
#set($pageLink = "javascript:${function}('$pageLink')")
<input type="radio" name="table${table.id}-pageSize" id="table${table.id}-size0" onchange="$pageLink" #if($table.pageSize == 0)checked#end> <label for="table${table.id}-size0">$i18n.get('table.page.all')</label>
$i18n.get('table.page.size')
</span>
#end

## ------------------------------------------------------------------------------------------------
## ----------------------------------- TREES GENERATION -------------------------------------------
## ------------------------------------------------------------------------------------------------

#**
 * Displays lines, expand boxes and icons for a tree view.
 *
 * @param $table the table tool.
 * @param $row the row to displays tree images for.
 * @param $toggleExpandLink LinkTool with preconfigured action for toggling row expansion
 *#
#macro(tableView_linesAndFoldersBase $table $row $toggleExpandLink)
#foreach($box in $table.linesAndFolders($row))##
#if($box.linkType == 'toggle-expand')##
<a href="$toggleExpandLink"><img src="$link.content("images/tree/${box.type}.gif")" /></a>##
#else##
<img src="$link.content("images/tree/${box.type}.gif")" />##
#end##
#end##
#end

#**
 * Standard lines and folders with defalut expansion tooggling action.
 *
 * @param $table the table tool.
 * @param $row the row to displays tree images for.
 *#
#macro(tableView_linesAndFolders $table $row $tableLink)
#tableView_linesAndFoldersBase($table $row $tableLink.set('rowId',$row.id).action('table.ToggleExpanded'))##
#end

#**
 * Display extended lines for displaying a muliti row item.
 *
 * @param $table the table tool.
 * @param $row the row to displays tree images for.
 *#
#macro(tableView_extenededLines $table $row)##
#foreach($box in $table.linesAndFolders($row))##
#if($box.extended)##
<img src="$link.content("images/tree/I.gif")" />#else##
<img src="$link.content("images/tree/blank.gif")" />#end##
#end##
#end##

##

#**
 * Standard lines and folders with defalut expansion tooggling action.
 *
 * @param $table the table tool.
 * @param $row the row to displays tree images for.
 *#
#macro(tableView_linesAndFolders_Submit $table $row $tableLink $function)
  #set($toggleExpandLink = $tableLink.set('rowId',$row.id).action('table.ToggleExpanded'))
  #set($toggleExpandLink = "javascript:${function}('$toggleExpandLink')")
  #tableView_linesAndFoldersBase($table $row $toggleExpandLink)##
#end

#** 
 * Write nesting padding for a table row.
 * 
 * The padding string will be printed apropriate number of times. Threshold parameter decides
 * which nesting level will get first pad: 0 - tree root, 1 - root's children and so on.
 *#
#macro(tableView_nestingPadding $table $row $threshold $pad)
#foreach($lf in $table.linesAndFolders($row))#if($velocityCount > $threshold)$pad#end#end
#end

#**
 * Displays a tree that displays row object's name property.
 *
 * @param $table the table model.
 * @param $tableLink LinkTool with preset tableId.
 * @param $rowLink LinkTool with preconfigured links for table elements.
 * @param $rowIdParameterName the name of the request parameters to put row
 *        identifier to.
 *#
#macro(tableView_oneColumnTree $table $tableLink $rowLink $rowIdParameterName)
  #if ($table.pageRowCount == 0)
  <div class="row1">$i18n.get('table.empty')</div>
  #else
    #foreach ($row in $table.rows)
      ## compute even/odd table row
      #set($odd = $velocityCount%2)
      <div class="row$odd tree-lines-and-folders">#tableView_linesAndFolders($table $row $tableLink)
        <a href="$rowLink.set($rowIdParameterName,$row.id)">$row.object.name</a>
      </div>
    #end
  #end
#end
