<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Pipeline</title>
  </properties>

  <body>
    <section name="Pipeline">
      <subsection name="Description">
        <p>A pipeline component can be considered a composite <code>java.lang.Runnable</code>
        implementation. It delegates the invocation of it's <code>run()</code> to a number of
        dependant components called <em>Valves</em>. </p>
        <p>Pipeline component also provides support for error handling and state cleanup, modelled 
        after Java <code>try-catch-finally</code> statement. Three sets of Valves are defined for a 
        pipeline: <em>try</em> Valves that perform the processing, <em>catch</em> Valves that are
        invoked only if an unhandled exception occurs in one of the <em>try</em> Valves (all 
        subsequent <em>try</em> Valves are <strong>not</strong> invoked in such situation). In case of a "double 
        fault" - an unhandled exception in one of the <em>catch</em> Valves, the remaining 
        <em>catch</em> Valves are <strong>not</strong> invoked. All of the <em>finally</em> Valves
        are <strong>always</strong> invoked, even if some of them throw exceptions.</p>
        <p>A pipeline usually introduces a notion of "unit of work" that is passed between the 
        Valves. Unfortunately it's impossible to define in a type-safe way without generic types,
        and there are multiple possible variants of Valve relationships. We decided to refrain
        from making these policy decisions, except that we endorse communication of the Valves 
        through the thread <a href="Context.html">Context</a>.</p>
      </subsection>
    
      <subsection name="Browse">
        <p>
          <ul>
            <li>Pipeline <a href="../apidocs/org/objectledge/pipeline/Pipeline.html">JavaDoc</a></li>
            <li>Pipeline <a href="../xref/org/objectledge/pipeline/Pipeline.html">XRef</a></li>
            <li>Pipeline <a href="http://objectledge.org/fisheye/ledge/ledge-components/src/main/java/org/objectledge/pipeline/Pipeline.java">CVS log</a></li>
          </ul>
        </p>
      </subsection>
    
      <subsection name="Dependencies">
        <p>
          <table>
            <tr>
              <th>required components</th>
              <td width="100%">
                <a href="Context.html">Context</a>,
                <a href="../../ledge-container/container-subsystems/LoggerFactory.html">LoggerFactory</a>,
              </td>
            </tr>
            <tr>
              <th>required libraries</th>
              <td>DNA API (dna:dna-api)</td>
            </tr>
          </table>
        </p>
      </subsection>  
         
      <subsection name="Constructor parameters">
        <p>
  	      <table>
	        <tr>
	          <th>position</th>
	          <th>type</th>
	          <th widht="100%">descritpion</th>
	        </tr>
	        <tr>
	          <td>1</td>
	          <td><code>org.objectledge.context.Context</code></td>
	          <td>the thread's context</td>
	        </tr>
		    <tr>
		      <td>2</td>
		      <td><code>import org.jcontainer.dna.Logger</code></td>
		      <td>the logger</td>
		    </tr>
		    <tr>
		      <td>3</td>
		      <td><code>java.lang.Runnable[]</code></td>
		      <td>the valves to invoke in the <em>try</em> section</td>
		    </tr>
		    <tr>
		      <td>4</td>
		      <td><code>java.lang.Runnable[]</code></td>
		      <td>the valves to invoke in the <em>catch</em> section</td>
		    </tr>
		    <tr>
		      <td>5</td>
		      <td><code>java.lang.Runnable[]</code></td>
		      <td>the valves to invoke in the <em>finally</em> section</td>
		    </tr>
		  </table>
 	    </p>
	  </subsection>
    </section>
  </body>
</document>  
  