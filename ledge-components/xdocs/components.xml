<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Overview of components</title>
  </properties>
  
  <body>
    <section name="Components">
      <subsection name="Context">
        <p>
          <table>
            <tr>
              <th>required components</th>
              <td width="100%">none</td>
            </tr>
            <tr>
              <th>required libraries</th>
              <td>none</td>
            </tr>
          </table>
        </p>

        <p>Provides dependant components with a nontion of <em>thread context</em>, that is a set
		of name - value pairs (boths elements are arbitrary Java objectss) that is specific
		to the currently executing thread. This allows passing information across the method
		call stack without actually pushing it through formal arguments. Servlet Request and
		Response objects, authentication and transactiotion managment objects are conveniently
		passed around using thread context.</p>

		<p><a href="apidocs/org/objectledge/context/Context.html">View JavaDoc</a></p>

		<p>Constructor parameters<br/>
		none</p>
      </subsection>
      
      <subsection name="FileSystem">
        <p>
          <table>
            <tr>
              <th>required components</th>
              <td width="100%">one or more <a href="apidocs/org/objectledge/filesystem/FileSystemProvider.html">FileSystemProvider</a> implementations.</td>
            </tr>
            <tr>
              <th>required libraries</th>
              <td>none</td>
            </tr>
          </table>
        </p>
        <p>FileSystem component provides a set of operations that are performed on files, directories
        and abstract pathnames, including: file reading, writing (streams, byte[], String), random 
        access (read, write, rewinding), atomic creation, deletion and renaming; directory creation, 
        deletion, renaming and listings; path name normalisation and basename / directory name 
        splitting and creation of java.net.URL objects that can be used to access the component's
        functionality.</p>
        <p>The biggest strength of this component is that it's functionality is delegated to one
        or more <em>providers</em> that are specific to particural kind of storage media. The providers
        are accessed in order of registration, and the first one that has the requested file or
        directory performs the operation. For consistency reasons it is recommended that only
        the first registered provider is write-enabled.</p>
        <p>These are the two typical setups of the component:
          <ol>
            <li><code>LocalFileSystemProvider, ClasspathFileSystemProvider</code></li>
            <li><code>LocalFileSystemProvider, ServletFileSystemProvider, 
              ClasspathFileSystemProvider</code></li>
          </ol>
        </p>
        <p>The first setup is used in command line applications. It allows them to write logs and
        teporary files to the local disk, and read their configuration data from the jar files.
        The user may override the configuration settings present in the jar files by copying 
        relevant files out of the jar onto the disk and modyfiing them as necessary.</p> 
        <p>The second setup is used in web applications (the ServletFileSystemProvideris hosted in 
        ObjectLedge web module). A web application is typically composed of a number of jar files.
        A jar file with application components can contain configuration files with factory default
        settings. The Application Assembler (as defined by J2EE) extracts configuration files
        that need to be customized and puts them into the war archive. Further, the Application
        Deployer may extract configuration files from the war archive, and jar archives within,
        customized them and put them into a directory on the server machine, should deployment
        time adjustments prove necessary.</p>

		<p><a href="apidocs/org/objectledge/filesystem/FileSystem.html">View JavaDoc</a></p>
		
		<p>Constructor parameters
		  <table>
		    <tr>
		      <th>position</th>
		      <th>type</th>
		      <th widht="100%">descritpion</th>
		    </tr>
		    <tr>
		      <td>1</td>
		      <td><code>org.objectledge.filesystem.FileSystemProvider[]</code></td>
		      <td>an array of FileSystemProvider components to use</td>
		    </tr>
		    <tr>
		      <td>2</td>
		      <td><code>int</code></td>
		      <td>the size of buffers (in bytes) used for reading and writing files. Value between 4k
		      and 64k is recommended.</td>
		    </tr>
		    <tr>
		      <td>3</td>
		      <td><code>int</code></td>
		      <td>the maximum size of the file that will be loaded into memory as a single chunk. 
		      This is a security intensive setting, setting it too high may make the system 
		      vulnerable to a DOS attack. A value between 16k and 1M is recommended, depending
		      on the size of files you need.</td>
		    </tr>
		  </table>
		</p>
      </subsection> 
      
      <subsection name="LocalFileSystemProvider">
        <p>
          <table>
            <tr>
              <th>required components</th>
              <td width="100%">none</td>
            </tr>
            <tr>
              <th>required libraries</th>
              <td>none</td>
            </tr>
          </table>
        </p>

        <p>This is the basic implementation of the <code>FileSystemProvider</code> interaface 
        operating over local file system. It supports read and write operations. Stat operations
        (size, modification time) and directory listings are reported from actual data.</p>

		<p><a href="apidocs/org/objectledge/filesystem/impl/LocalFileSystemProvider.html">View JavaDoc</a></p>

		<p>Constructor parameters
		  <table>
		    <tr>
		      <th>position</th>
		      <th>type</th>
		      <th widht="100%">descritpion</th>
		    </tr>
		    <tr>
		      <td>1</td>
		      <td>String</td>
		      <td>name of the provider, used in <code>FileSystem.getProvider(String)</code> calls, 
		      and returned from <code>FileSystemProvider.getName()</code> calls on providers returned 
		      from <code>FileSystem.getProviders()</code> method.</td>
		    </tr>
		    <tr>
		      <td>2</td>
		      <td>String</td>
		      <td>pathname of a directory on the local filesystem. May be either absolute (starting 
		      with platform's directory separator character or &lt;drive-letter&gt;:\ token), 
		      relative to the  user's home directory, as defined by <code>user.home</code> (starting
		      with ~&lt;directory-separator&gt; token), or relative to the application's working 
		      directory, as defined by <code>user.dir</code> system property. <br/>
		      The pathname must point to a valid readable directory.</td>
		    </tr>
		  </table>
		</p>      
      </subsection>
      
      <subsection name="ClasspathFileSystemProvider">
        <p>
          <table>
            <tr>
              <th>required components</th>
              <td width="100%"><code>java.lang.Classloader</code></td>
            </tr>
            <tr>
              <th>required libraries</th>
              <td>none</td>
            </tr>
          </table>
        </p>
        
        <p>This is an implementation of the FileSystemProvider that delegates it's functionality
        to the <code>java.lang.Classloader.getResource(String)</code> calls. Stat operations,
        directory existence checking and listings are supported only if there are listing files
        available. The ObjectLedge Maven plugin is able to generate these files automatically.</p>

		<p><a href="apidocs/org/objectledge/filesystem/impl/ClasspathFileSystemProvider.html">View JavaDoc</a></p>
        
		<p>Constructor parameters
		  <table>
		    <tr>
		      <th>position</th>
		      <th>type</th>
		      <th widht="100%">descritpion</th>
		    </tr>
		    <tr>
		      <td>1</td>
		      <td>String</td>
		      <td>name of the provider, used in <code>FileSystem.getProvider(String)</code> calls, 
		      and returned from <code>FileSystemProvider.getName()</code> calls on providers returned 
		      from <code>FileSystem.getProviders()</code> method.</td>
		    </tr>
		    <tr>
		      <td>2</td>
		      <td>java.lang.Classloader</td>
		      <td>The Classloader instance resources are read from.</td>
		    </tr>
          </table>
        </p>        
      </subsection>
     
      <subsection name="Pipeline">
      </subsection>
      
      <subsection name="Templating">
      </subsection>
      
      <subsection name="XMLValidator">
        <p>
          <table>
            <tr>
              <th>required components</th>
              <td width="100%"><code>org.objectledge.filesystem.FileSystem</code></td>
            </tr>
            <tr>
              <th>required libraries</th>
              <td>none</td>
            </tr>
          </table>
        </p>
        
        <p>Validates XML files against schemata using Jing library.</p>
  
        <p>The primary schema language used throughout ObjectLedge project is RelaxNG, but the Jing
        library determines the schema languague using XML namespace of the top level element. At the
        moment XML based schema languages supported by Jing and thus by XMLValidator are W3C XSD, 
        Scheamtron and Namespace Routing Language.</p>

		<p>Constructor parameters
		  <table>
		    <tr>
		      <th>position</th>
		      <th>type</th>
		      <th widht="100%">descritpion</th>
		    </tr>
		    <tr>
		      <td>1</td>
		      <td><code>org.objectledge.filesystem.FileSystem</code></td>
		      <td>The file system to load data from.</td>
		    </tr>
          </table>
        </p>        
      </subsection>
    </section>
    
    <section name="Utilities">
      <subsection name="Parameters">
      </subsection>
      
      <subsection name="StringUtils">
      </subsection>
    </section>
  </body>
</document>
  
