package org.objectledge.database;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.jcontainer.dna.Logger;
import org.objectledge.database.ThreadDataSource.ThreadConnection;
import org.objectledge.database.impl.DelegatingStatement;

/**
 * Statement wrapper that monitors the number of DB reads/writes, their duration
 *
 *
 * @author <a href="rafal@caltha.pl">Rafa≈Ç Krzewski</a>
 * @version $Id: MonitoringStatement.java,v 1.1 2005-10-07 15:35:41 rafal Exp $
 */
public class MonitoringStatement 
    extends DelegatingStatement
{
    private final ThreadConnection threadConn;
    private final Logger log;
    /**
     * Creates a new MonitoringStatement instance.
     *
     * @param statement original Statement.
     * @param threadConn associated ThreadConnection.
     * @param log the Logger.
     */
    public MonitoringStatement(Statement statement, ThreadConnection threadConn, Logger log)
    {
        super(statement);
        this.threadConn = threadConn;
        this.log = log;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void addBatch(String sql)
        throws SQLException
    {
        threadConn.startStatement("addBatch " + sql);
        super.addBatch(sql);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean execute(String sql, int autoGeneratedKeys)
        throws SQLException
    {
        threadConn.startStatement(sql);
        try
        {
            return super.execute(sql, autoGeneratedKeys);
        }
        finally
        {
            threadConn.finishStatement(sql);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean execute(String sql, int[] columnIndexes)
        throws SQLException
    {
        threadConn.startStatement(sql);
        try
        {
            return super.execute(sql, columnIndexes);
        }
        finally
        {
            threadConn.finishStatement(sql);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean execute(String sql, String[] columnNames)
        throws SQLException
    {
        threadConn.startStatement(sql);
        try
        {
            return super.execute(sql, columnNames);
        }
        finally
        {
            threadConn.finishStatement(sql);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean execute(String sql)
        throws SQLException
    {
        threadConn.startStatement(sql);
        try
        {
            return super.execute(sql);
        }
        finally
        {
            threadConn.finishStatement(sql);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultSet executeQuery(String sql)
        throws SQLException
    {
        threadConn.startStatement(sql);
        try
        {
            return super.executeQuery(sql);
        }
        finally
        {
            threadConn.finishStatement(sql);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
        throws SQLException
    {
        threadConn.startStatement(sql);
        try
        {
            return super.executeUpdate(sql, autoGeneratedKeys);
        }
        finally
        {
            threadConn.finishStatement(sql);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int executeUpdate(String sql, int[] columnIndexes)
        throws SQLException
    {
        threadConn.startStatement(sql);
        try
        {
            return super.executeUpdate(sql, columnIndexes);
        }
        finally
        {
            threadConn.finishStatement(sql);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int executeUpdate(String sql, String[] columnNames)
        throws SQLException
    {
        threadConn.startStatement(sql);
        try
        {
            return super.executeUpdate(sql, columnNames);
        }
        finally
        {
            threadConn.finishStatement(sql);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int executeUpdate(String sql)
        throws SQLException
    {
        threadConn.startStatement(sql);
        try
        {
            return super.executeUpdate(sql);
        }
        finally
        {
            threadConn.finishStatement(sql);
        }
    }
    
    
    /**
     * {@inheritDoc}
     */
    @Override
    public int[] executeBatch()
        throws SQLException
    {
        threadConn.startStatement("executeBatch");
        try
        {
            return super.executeBatch();
        }
        finally
        {
            threadConn.finishStatement("executeBatch");
        }
    }
}