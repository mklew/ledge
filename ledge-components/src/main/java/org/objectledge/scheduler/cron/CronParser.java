/* Generated By:JavaCC: Do not edit this line. CronParser.java */
package org.objectledge.scheduler.cron;

import java.io.StringReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;

import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import java.util.Collections;

public class CronParser implements CronParserConstants {
    // constants /////////////////////////////////////////////////////////////

    private static final String[] monthName = new String[] {
        "",
        "jan" , "feb" , "mar" , "apr" , "may" , "jun" ,
        "jul" , "aug" , "sep" , "oct" , "nov" , "dec" };

    private static final String[] weekdayName = new String[] {
     "sun", "mon" , "tue" , "wed" , "thu" , "fri" , "sat" };

    private static final int[][] spec_reboot = new int[][] {};

    private static final int[][] spec_yearly = new int[][]
        { { 0 }, { 0 }, { 1 }, { 1 }, { } };

    private static final int[][] spec_monthly = new int[][]
        { { 0 }, { 0 }, { 1 }, { }, { } };

    private static final int[][] spec_weekly = new int[][]
        { { 0 }, { 0 }, { }, { }, { 0 } };

    private static final int[][] spec_daily = new int[][]
        { { 0 }, { 0 }, { }, { }, { } };

    private static final int[][] spec_hourly = new int[][]
        { { 0 }, { }, { }, { }, { } };

    public int[][] parse(String config)
        throws ParseException,
               ValueOutOfRangeException
    {
        StringReader sr = new StringReader(config);
        ReInit(sr);
        return cron_config();
    }

    // unit test /////////////////////////////////////////////////////////////

    public static void main(String[] args)
        throws Exception
    {
        FileInputStream fis = new FileInputStream(args[0]);
        Reader reader = new InputStreamReader(fis, "ISO-8859-2");
        CronParser parser = new CronParser(reader);
        parser.test();
    }

    public static void dump(int[][] config)
    {
        if(config.length == 0)
        {
            System.out.print("@reboot");
        }
        else
        {
            for(int i=0; i<config.length; i++)
            {
                if(config[i].length == 0)
                {
                    System.out.print("*");
                }
                else
                {
                    for(int j=0; j<config[i].length; j++)
                    {
                        System.out.print(config[i][j]);
                        if(j < config[i].length - 1)
                        {
                            System.out.print(",");
                        }
                    }
                }
                if(i < config.length - 1)
                {
                    System.out.print(" ");
                }
            }
        }
        System.out.println();
    }

// productions ///////////////////////////////////////////////////////////////
  final public int number(int min, int max) throws ParseException {
    Token t;
    t = jj_consume_token(NUMBER);
        int v = Integer.parseInt(t.image);
        if(min > 0 && max > 0 && (v < min || v > max))
        {
            {if (true) throw new ValueOutOfRangeException(t, v, min, max);}
        }
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public List range(int min, int max) throws ParseException {
    int start, end;
    int step = -1;
    start = number(min,max);
    jj_consume_token(5);
    end = number(min,max);
    switch (jj_nt.kind) {
    case 6:
      jj_consume_token(6);
      step = number(-1,-1);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
        List result = new ArrayList();
        if(step < 0)
        {
           step = 1;
        }
        for(int i=start; i<=end; i+=step)
        {
            result.add(new Integer(i));
        }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public List value_or_range(int min, int max) throws ParseException {
    Token value = null;
    List range = null;
    if (jj_2_1(2)) {
      range = range(min, max);
    } else {
      switch (jj_nt.kind) {
      case NUMBER:
        value = jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        if(value != null)
        {
            List result = new ArrayList();
            result.add(new Integer(value.image));
            {if (true) return result;}
        }
        else
        {
            {if (true) return range;}
        }
    throw new Error("Missing return statement in function");
  }

  final public List list_of_values(int min, int max) throws ParseException {
    List temp = new ArrayList();
    List var;
    var = value_or_range(min, max);
                                     temp.add(var);
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case 7:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(7);
      var = value_or_range(min, max);
                                           temp.add(var);
    }
        List result = new ArrayList();
        Iterator i = temp.iterator();
        while(i.hasNext())
        {
            result.addAll((List)i.next());
        }
        Collections.sort(result);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public int[] value_spec(int min, int max) throws ParseException {
    List list=null;
    switch (jj_nt.kind) {
    case 8:
      jj_consume_token(8);
      break;
    case NUMBER:
      list = list_of_values(min, max);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if(list == null)
        {
           {if (true) return new int[0];}
        }
        else
        {
           int[] result = new int[list.size()];
           for(int i=0; i < list.size(); i++)
           {
               result[i] = ((Integer)list.get(i)).intValue();
           }
           {if (true) return result;}
        }
    throw new Error("Missing return statement in function");
  }

  final public int[] month_name() throws ParseException {
    switch (jj_nt.kind) {
    case 9:
      jj_consume_token(9);
      break;
    case 10:
      jj_consume_token(10);
      break;
    case 11:
      jj_consume_token(11);
      break;
    case 12:
      jj_consume_token(12);
      break;
    case 13:
      jj_consume_token(13);
      break;
    case 14:
      jj_consume_token(14);
      break;
    case 15:
      jj_consume_token(15);
      break;
    case 16:
      jj_consume_token(16);
      break;
    case 17:
      jj_consume_token(17);
      break;
    case 18:
      jj_consume_token(18);
      break;
    case 19:
      jj_consume_token(19);
      break;
    case 20:
      jj_consume_token(20);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        String t = getToken(0).image;
        for(int i=0; i<12; i++)
        if(monthName[i].equals(t))
        {
            {if (true) return new int[] { i };}
        }
        {if (true) throw new InternalError();}
    throw new Error("Missing return statement in function");
  }

  final public int[] weekday_name() throws ParseException {
    switch (jj_nt.kind) {
    case 21:
      jj_consume_token(21);
      break;
    case 22:
      jj_consume_token(22);
      break;
    case 23:
      jj_consume_token(23);
      break;
    case 24:
      jj_consume_token(24);
      break;
    case 25:
      jj_consume_token(25);
      break;
    case 26:
      jj_consume_token(26);
      break;
    case 27:
      jj_consume_token(27);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        String t = getToken(0).image;
        for(int i=0; i<7; i++)
        if(weekdayName[i].equals(t))
        {
            {if (true) return new int[] { i };}
        }
        {if (true) throw new InternalError();}
    throw new Error("Missing return statement in function");
  }

  final public int[][] special_config() throws ParseException {
    switch (jj_nt.kind) {
    case 28:
      jj_consume_token(28);
                {if (true) return spec_reboot;}
      break;
    case 29:
      jj_consume_token(29);
                {if (true) return spec_yearly;}
      break;
    case 30:
      jj_consume_token(30);
                  {if (true) return spec_yearly;}
      break;
    case 31:
      jj_consume_token(31);
                 {if (true) return spec_monthly;}
      break;
    case 32:
      jj_consume_token(32);
               {if (true) return spec_daily;}
      break;
    case 33:
      jj_consume_token(33);
                  {if (true) return spec_daily;}
      break;
    case 34:
      jj_consume_token(34);
                {if (true) return spec_hourly;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int[][] cron_config() throws ParseException {
    int[] minute = null;
    int[] hour = null;
    int[] day = null;
    int[] month = null;
    int[] weekday = null;
    int[][] special = null;
    switch (jj_nt.kind) {
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      special = special_config();
      break;
    case NUMBER:
    case 8:
      minute = value_spec(0,59);
      hour = value_spec(0,23);
      day = value_spec(1,31);
      switch (jj_nt.kind) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
        month = month_name();
        break;
      case NUMBER:
      case 8:
        month = value_spec(1,12);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
        weekday = weekday_name();
        break;
      case NUMBER:
      case 8:
        weekday = value_spec(0,7);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if(special != null)
        {
            {if (true) return special;}
        }
        else
        {
            int[][] result = new int[5][];
            result[0] = minute;
            result[1] = hour;
            result[2] = day;
            for(int i=0; i<month.length; i++)
            {
                month[i] -= 1;
            }
            result[3] = month;
            for(int i=0; i<weekday.length; i++)
            {
                 weekday[i] = (weekday[i] % 7) + 1;
            }
            result[4] = weekday;
            {if (true) return result;}
        }
    throw new Error("Missing return statement in function");
  }

  final public void test() throws ParseException {
   int[][] config;
    config = cron_config();
                           dump(config);
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case 35:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      jj_consume_token(35);
      config = cron_config();
                                  dump(config);
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  public CronParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40,0x10,0x80,0x110,0x1ffe00,0xfe00000,0xf0000000,0x1fff10,0xfe00110,0xf0000110,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x7,0x8,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CronParser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CronParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CronParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CronParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CronParser(CronParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CronParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[36];
    for (int i = 0; i < 36; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
