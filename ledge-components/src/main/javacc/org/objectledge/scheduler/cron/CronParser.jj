// 
//Copyright (c) 2003, Caltha - Gajda, Krzewski, Mach, Potempski Sp.J. 
//All rights reserved. 
//   
//Redistribution and use in source and binary forms, with or without modification,  
//are permitted provided that the following conditions are met: 
//   
//* Redistributions of source code must retain the above copyright notice,  
//this list of conditions and the following disclaimer. 
//* Redistributions in binary form must reproduce the above copyright notice,  
//this list of conditions and the following disclaimer in the documentation  
//and/or other materials provided with the distribution. 
//* Neither the name of the Caltha - Gajda, Krzewski, Mach, Potempski Sp.J.  
//nor the names of its contributors may be used to endorse or promote products  
//derived from this software without specific prior written permission. 
// 
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  
//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  
//WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  
//INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,  
//BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
//OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  
//WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  
//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  
//POSSIBILITY OF SUCH DAMAGE. 
//

options 
{
    UNICODE_INPUT = true;
    JAVA_UNICODE_ESCAPE = true;

    CACHE_TOKENS = true;
    
    STATIC = false;
}

PARSER_BEGIN(CronParser)

package org.objectledge.scheduler.cron;

import java.io.StringReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;

import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import java.util.Collections;

public class CronParser
{
    // constants /////////////////////////////////////////////////////////////
    
    private static final String[] monthName = new String[] {
        "", 
        "jan" , "feb" , "mar" , "apr" , "may" , "jun" ,
        "jul" , "aug" , "sep" , "oct" , "nov" , "dec" };
        
    private static final String[] weekdayName = new String[] {
     "sun", "mon" , "tue" , "wed" , "thu" , "fri" , "sat" };

    private static final int[][] spec_reboot = new int[][] {};

    private static final int[][] spec_yearly = new int[][] 
        { { 0 }, { 0 }, { 1 }, { 1 }, { } };
        
    private static final int[][] spec_monthly = new int[][] 
        { { 0 }, { 0 }, { 1 }, { }, { } };

    private static final int[][] spec_weekly = new int[][] 
        { { 0 }, { 0 }, { }, { }, { 0 } };

    private static final int[][] spec_daily = new int[][] 
        { { 0 }, { 0 }, { }, { }, { } };

    private static final int[][] spec_hourly = new int[][] 
        { { 0 }, { }, { }, { }, { } };

    public int[][] parse(String config)
        throws ParseException,
               ValueOutOfRangeException
    {
        StringReader sr = new StringReader(config);
        ReInit(sr);
        return cron_config();
    }

    // unit test /////////////////////////////////////////////////////////////

    public static void main(String[] args)
        throws Exception
    {
        FileInputStream fis = new FileInputStream(args[0]);
        Reader reader = new InputStreamReader(fis, "ISO-8859-2");
        CronParser parser = new CronParser(reader);
        parser.test();
    }

    public static void dump(int[][] config)
    {
        if(config.length == 0)
        {
            System.out.print("@reboot"); 
        }
        else
        {
            for(int i=0; i<config.length; i++)
            {
                if(config[i].length == 0)
                { 
                    System.out.print("*");
                }
                else
                {
                    for(int j=0; j<config[i].length; j++)
                    {
                        System.out.print(config[i][j]);
                        if(j < config[i].length - 1)
                        {
                            System.out.print(",");
                        }
                    }
                }
                if(i < config.length - 1)
                {
                    System.out.print(" ");
                }
            } 
        }
        System.out.println();
    }
}

PARSER_END(CronParser)

// lexems ////////////////////////////////////////////////////////////////////

SKIP :
{
  " " | "\t"
}

TOKEN :
{
    <#DIGIT : ["0"-"9"]> |
    <NUMBER : (<DIGIT>)+>
}

// productions ///////////////////////////////////////////////////////////////

int number(int min, int max) :
{
    Token t;
}
{
    t=<NUMBER>
    {
        int v = Integer.parseInt(t.image);
        if(min > 0 && max > 0 && (v < min || v > max))
        {
            throw new ValueOutOfRangeException(t, v, min, max);
        }
        return v;
    }
}

List range(int min, int max) :
{
    int start, end;
    int step = -1;
}
{
    ( start=number(min,max) "-" end=number(min,max) [ "/" step=number(-1,-1) ] )
    {
        List result = new ArrayList();
        if(step < 0)
        {
           step = 1;
        }
        for(int i=start; i<=end; i+=step)
        { 
            result.add(new Integer(i));
        }
        return result;
    }   
}

List value_or_range(int min, int max) :
{
    Token value = null;
    List range = null;
}
{
    ( LOOKAHEAD(2) range=range(min, max) | value=<NUMBER> )
    {
        if(value != null)
        {
            List result = new ArrayList(); 
            result.add(new Integer(value.image));
            return result;
        }
        else
        {
            return range;
        }
    }
}

List list_of_values(int min, int max) :
{
    List temp = new ArrayList();
    List var;
}
{
    ( 
      var=value_or_range(min, max) { temp.add(var); } 
      ( "," var=value_or_range(min, max) { temp.add(var); } )* 
    )
    {
        List result = new ArrayList();
        Iterator i = temp.iterator();
        while(i.hasNext())
        {
            result.addAll((List)i.next());
        }
        Collections.sort(result);
        return result;
    }
}

int[] value_spec(int min, int max) :
{
    List list=null;
}
{
    ( "*" | list=list_of_values(min, max) )
    { 
        if(list == null)
        {       
           return new int[0]; 
        }
        else
        {
           int[] result = new int[list.size()];
           for(int i=0; i < list.size(); i++)
           {
               result[i] = ((Integer)list.get(i)).intValue();
           }
           return result;
        }
    }
}

int[] month_name() :
{
}
{
    ( "jan" | "feb" | "mar" | "apr" | "may" | "jun" |
      "jul" | "aug" | "sep" | "oct" | "nov" | "dec" )
    {
        String t = getToken(0).image;
        for(int i=0; i<12; i++)
        if(monthName[i].equals(t))
        { 
            return new int[] { i };
        }
        throw new InternalError();
    }
}

int[] weekday_name() :
{
}
{
    ( "mon" | "tue" | "wed" | "thu" | "fri" | "sat" | "sun" )
    {
        String t = getToken(0).image;
        for(int i=0; i<7; i++)
        if(weekdayName[i].equals(t))
        { 
            return new int[] { i };
        }
        throw new InternalError();
    }
}

int[][] special_config() :
{
}
{
    "@reboot" { return spec_reboot; } |
    "@yearly" { return spec_yearly; } |
    "@annually" { return spec_yearly; } |
    "@monthly" { return spec_monthly; } |
    "@daily" { return spec_daily; } |
    "@midnight" { return spec_daily; } |
    "@hourly" { return spec_hourly; }
}

int[][] cron_config() :
{
    int[] minute = null;
    int[] hour = null;
    int[] day = null;
    int[] month = null;
    int[] weekday = null;
    int[][] special = null;
}
{
    ( special=special_config() | 
      minute=value_spec(0,59) hour=value_spec(0,23) day=value_spec(1,31)
      ( month=month_name() | month=value_spec(1,12) )
      ( weekday=weekday_name() | weekday=value_spec(0,7) )
    )
    {
        if(special != null)
        {
            return special;
        }
        else
        {
            int[][] result = new int[5][];
            result[0] = minute;
            result[1] = hour;
            result[2] = day;
            for(int i=0; i<month.length; i++)
            {
                month[i] -= 1;
            }
            result[3] = month;
            for(int i=0; i<weekday.length; i++)
            {
                 weekday[i] = (weekday[i] % 7) + 1;
            }
            result[4] = weekday;
            return result;
        }
    }
}

void test() :
{
   int[][] config;
}
{
    config=cron_config() { dump(config); } 
    ( "\n" config=cron_config() { dump(config); } )*
}
